import streamlit as st
from crewai import Agent, Task, Crew, LLM

# Streamlit Interface
st.title("Feature Extraction Research Pipeline")

# User input for research topic
topic = st.text_input("Enter the topic for feature extraction research:")

# Placeholder for the results
results_placeholder = st.empty()

# Button to start the process
if st.button("Start Research Process"):
    if not topic.strip():
        st.error("Please enter a valid topic before starting the process.")
    else:
        # Display a spinner during the execution
        with st.spinner(f"Running research process for topic: {topic}..."):

            # === Dynamically create agents and tasks ===
            researcher = Agent(
                role="Feature Extraction Researcher",
                goal=f"Identify feature extraction techniques in {topic} that can be directly implemented as a custom Scikit-learn transformer.",
                backstory="You are a researcher specializing in finding feature extraction methods that are not only theoretical but also directly implementable in machine learning pipelines using Scikit-learn transformers. "
                          f"You need to identify both classic methods and innovative ideas in {topic} that can be coded into Scikit-learn.",
                allow_delegation=False,
                verbose=True,
                llm=LLM(model="ollama/llama3.1:8b", base_url="http://localhost:11434")
            )

            # Programmer Agent
            coder = Agent(
                role="Feature Transformer Implementer",
                goal=f"Implement custom Scikit-learn transformers for {topic} based on the feature extraction methods proposed by the Researcher.",
                backstory="You are an experienced Python developer with a background in machine learning. "
                          "You specialize in creating Scikit-learn transformers to integrate feature extraction techniques",
                allow_delegation=False,
                verbose=True,
                llm=LLM(model="ollama/llama3.1:8b", base_url="http://localhost:11434")
            )

            # Reviewer Agent: modified to produce a synthesis of features, their code, and their relevance to the topic
            reviewer = Agent(
                role="Feature Extraction Reviewer",
                goal=f"Review the code and provide a detailed synthesis of all the feature extraction methods used for {topic}, including their associated code and the rationale behind their use.",
                backstory="You are a senior developer tasked with producing a clear and structured summary of the feature extraction methods identified by the Researcher. "
                          "Your job is to ensure that the code is clean and that the rationale behind using each method, whether classical or innovative, is clearly explained.",
                allow_delegation=False,
                verbose=True,
                llm=LLM(model="ollama/llama3.1:8b", base_url="http://localhost:11434")
            )

            # Research Task: The researcher must now find methods that are directly implementable in Scikit-learn
            research_task = Task(
                description=(
                    f"1. Research and identify 3-5 classic feature extraction methods in {topic} typically used in the domain that can be implemented directly in Scikit-learn transformers.\n"
                    "2. Research 3-5 innovative ideas for feature extraction from similar domains or novel approaches that can also be implemented in Scikit-learn transformers.\n"
                    "3. Provide brief explanations of why these methods may be applicable to the given problem and ensure they are implementable."
                ),
                expected_output="A list of 3-5 classic feature extraction methods and 3-5 innovative methods, each ready to be implemented as a Scikit-learn transformer.",
                agent=researcher,
            )

            # Code Implementation Task (will be dynamically modified)
            coding_task = Task(
                description=(
                    f"1. Implement all the feature extraction techniques from the following list:\n{topic}\n"
                    "2. Ensure the code is clean, well-commented, and ready for production use.\n"
                    "3. Focus only on implementing the custom feature extraction transformers, without integrating them into a Scikit-learn pipeline."
                ),
                expected_output="A Python file with the custom feature extraction transformers, without integration into a pipeline.",
                agent=coder,
            )

            # Review and Synthesis Task (will be dynamically modified)
            review_task = Task(
                description=(
                    f"1. Review the code generated by the Coder for clarity and correctness.\n"
                    f"2. Provide an executive summary explaining the feature extraction techniques implemented from the following list:\n{topic}\n"
                    "3. Include the code for each feature extraction method in the summary, as well as a rationale for why these methods are useful for the given topic."
                ),
                expected_output="A final Python file with comments and an executive summary explaining the feature extraction approach, distinguishing between classical and innovative techniques.",
                agent=reviewer
            )

            # Create the Crew with all the agents and tasks
            crew = Crew(
                agents=[researcher, coder, reviewer],
                tasks=[research_task, coding_task, review_task],
                verbose=True
            )

            # Start the CrewAI process with the chosen topic and capture the results
            final_result = crew.kickoff(inputs={"topic": topic})

            # Access the outputs from the 'tasks_output' list
            research_output = final_result.tasks_output[0].raw  # Task output for researcher
            coding_output = final_result.tasks_output[1].raw    # Task output for coder
            review_output = final_result.tasks_output[2].raw    # Task output for reviewer

            # Displaying results in Streamlit
            st.header("Researcher's Output")
            st.subheader("Task Description:")
            st.write(research_task.description)
            st.subheader("Final Answer:")
            st.write(research_output)

            st.header("Coder's Output")
            st.subheader("Task Description:")
            st.write(coding_task.description)
            st.subheader("Final Answer:")
            st.write(coding_output)

            st.header("Reviewer's Output")
            st.subheader("Task Description:")
            st.write(review_task.description)
            st.subheader("Final Answer:")
            st.write(review_output)

            # Update the interface with the complete result
            results_placeholder.markdown(final_result)
